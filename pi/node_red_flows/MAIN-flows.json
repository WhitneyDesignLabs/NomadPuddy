[
    {
        "id": "503ee3ff2c559985",
        "type": "tab",
        "label": "Ollama LLM Piper TTS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d83834d424a78eb0",
        "type": "mqtt in",
        "z": "503ee3ff2c559985",
        "name": "",
        "topic": "llm/input",
        "qos": "0",
        "datatype": "utf8",
        "broker": "4a3fe1a11db06e6e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 400,
        "wires": [
            [
                "05e067848c018a25",
                "876d6d708314d30c"
            ]
        ]
    },
    {
        "id": "2e68d431f1c3ebea",
        "type": "mqtt out",
        "z": "503ee3ff2c559985",
        "name": "",
        "topic": "llm/output",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4a3fe1a11db06e6e",
        "x": 1420,
        "y": 400,
        "wires": []
    },
    {
        "id": "59d1ec9e1b1c312e",
        "type": "http request",
        "z": "503ee3ff2c559985",
        "name": "Ollama API Call",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://192.168.8.60:11434/api/generate",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 660,
        "y": 420,
        "wires": [
            [
                "f5d5f66c9dbab415",
                "dc1b02777b636a15"
            ]
        ]
    },
    {
        "id": "876d6d708314d30c",
        "type": "function",
        "z": "503ee3ff2c559985",
        "name": "Prepare API Request",
        "func": "if (typeof msg.payload === 'string') {\n    msg.payload = {\n        model: \"llama3.1\",\n        prompt: msg.payload\n    };\n} else if (msg.payload && msg.payload.prompt) {\n    msg.payload = {\n        model: \"llama3.1\",\n        prompt: msg.payload.prompt\n    };\n} else {\n    msg.warn(\"Invalid input format\");\n    return null;\n}\n\nnode.send(msg);\nnode.warn(JSON.stringify(msg.payload, null, 2));  // This will log the payload in the debug window",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 420,
        "wires": [
            [
                "59d1ec9e1b1c312e",
                "23c78b4ec23c1ae0"
            ]
        ]
    },
    {
        "id": "05e067848c018a25",
        "type": "debug",
        "z": "503ee3ff2c559985",
        "name": "Input Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 480,
        "wires": []
    },
    {
        "id": "23c78b4ec23c1ae0",
        "type": "debug",
        "z": "503ee3ff2c559985",
        "name": "API Request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 480,
        "wires": []
    },
    {
        "id": "f5d5f66c9dbab415",
        "type": "debug",
        "z": "503ee3ff2c559985",
        "name": "Raw API Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 480,
        "wires": []
    },
    {
        "id": "fda7d292cff16c87",
        "type": "debug",
        "z": "503ee3ff2c559985",
        "name": "Debug Prespeak",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 480,
        "wires": []
    },
    {
        "id": "dc1b02777b636a15",
        "type": "function",
        "z": "503ee3ff2c559985",
        "name": "Process API Response",
        "func": "let fullResponse = \"\";\nlet lines = msg.payload.split('\\n');\nfor (let line of lines) {\n    if (line.trim() !== '') {\n        try {\n            let jsonResponse = JSON.parse(line);\n            if (jsonResponse.response) {\n                fullResponse += jsonResponse.response;\n            }\n        } catch (e) {\n            // If JSON parsing fails, ignore this line\n        }\n    }\n}\n\n// Send just the text string, not an object\nmsg.payload = fullResponse.trim();\n\nnode.warn(\"Processed Response: \" + msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 420,
        "wires": [
            [
                "fda7d292cff16c87",
                "8cb7e0a0923b3730"
            ]
        ]
    },
    {
        "id": "8cb7e0a0923b3730",
        "type": "function",
        "z": "503ee3ff2c559985",
        "name": "Escape text",
        "func": "msg.payload = msg.payload.replace(/[\\n\\r]/g, ' ').replace(/[^a-zA-Z0-9 .,?!]/g, '');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 420,
        "wires": [
            [
                "64da4478fc92a32b",
                "2e68d431f1c3ebea"
            ]
        ]
    },
    {
        "id": "64da4478fc92a32b",
        "type": "debug",
        "z": "503ee3ff2c559985",
        "name": "Escaped Text",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 480,
        "wires": []
    },
    {
        "id": "4f32a609f01741a9",
        "type": "comment",
        "z": "503ee3ff2c559985",
        "name": "Works!",
        "info": "",
        "x": 690,
        "y": 280,
        "wires": []
    },
    {
        "id": "e279f1387d9ad214",
        "type": "mqtt in",
        "z": "503ee3ff2c559985",
        "name": "",
        "topic": "stt/output",
        "qos": "2",
        "datatype": "utf8",
        "broker": "4a3fe1a11db06e6e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 340,
        "wires": [
            [
                "876d6d708314d30c"
            ]
        ]
    },
    {
        "id": "e41996384de4404d",
        "type": "comment",
        "z": "503ee3ff2c559985",
        "name": "Change LLM Model Here",
        "info": "",
        "x": 430,
        "y": 380,
        "wires": []
    },
    {
        "id": "4a3fe1a11db06e6e",
        "type": "mqtt-broker",
        "name": "Puddy_MQTT",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]